// Generated by CoffeeScript 1.3.3
(function() {
  var Note, Player, Sequencer, Synth,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  Note = (function() {

    Note.prototype.NOTES = [16.35, 17.32, 18.35, 19.45, 20.6, 21.83, 23.12, 24.5, 25.96, 27.5, 29.14, 30.87, 32.7, 34.65, 36.71, 38.89, 41.2, 43.65, 46.25, 49, 51.91, 55, 58.27, 61.74, 65.41, 69.3, 73.42, 77.78, 82.41, 87.31, 92.5, 98, 103.83, 110, 116.54, 123.47, 130.81, 138.59, 146.83, 155.56, 164.81, 174.61, 185, 196, 207.65, 220, 233.08, 246.94, 261.63, 277.18, 293.66, 311.13, 329.63, 349.23, 369.99, 392, 415.3, 440, 466.16, 493.88, 523.25, 554.37, 587.33, 622.25, 659.26, 698.46, 739.99, 783.99, 830.61, 880, 932.33, 987.77, 1046.5, 1108.73, 1174.66, 1244.51, 1318.51, 1396.91, 1479.98, 1567.98, 1661.22, 1760, 1864.66, 1975.53, 2093, 2217.46, 2349.32, 2489.02, 2637.02, 2793.83, 2959.96, 3135.96, 3322.44, 3520, 3729.31, 3951.07, 4186.01, 4434.92, 4698.64, 4978];

    function Note() {
      this.note = -1;
      this.amp = 0.5;
      this.amp_t = 1;
      this.type = 'saw';
      this.filter = 1;
      this.q = 2;
      this.pitch = 0;
      this.pitch_t = 0.1;
    }

    Note.prototype.is_active = function() {
      return this.note = !-1;
    };

    Note.prototype.frequency = function() {
      if (this.note === -1) {
        return null;
      }
      return this.NOTES[this.note];
    };

    return Note;

  })();

  Sequencer = (function() {

    function Sequencer() {
      var n, t, track, _i, _j;
      this.playPos = 0;
      this.tracks = [];
      this.stepCallbacks = [];
      for (t = _i = 0; _i <= 3; t = ++_i) {
        track = [];
        for (n = _j = 0; _j <= 15; n = ++_j) {
          track.push(new Note());
        }
        this.tracks.push(track);
      }
    }

    Sequencer.prototype.next = function() {
      var cb, notes, track, _i, _j, _len, _len1, _ref, _ref1;
      notes = [];
      _ref = this.tracks;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        track = _ref[_i];
        notes.push(track[this.playPos]);
      }
      this.playPos = (this.playPos + 1) % 16;
      _ref1 = this.stepCallbacks;
      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
        cb = _ref1[_j];
        cb({
          pos: this.playPos
        });
      }
      return notes;
    };

    Sequencer.prototype.addStepCallback = function(cb) {
      return this.stepCallbacks.push(cb);
    };

    Sequencer.prototype.reset = function() {
      return this.playPos = 0;
    };

    return Sequencer;

  })();

  Player = (function() {

    function Player() {
      this.play = __bind(this.play, this);

      this.tick = __bind(this.tick, this);
      this.sequencer = new Sequencer();
      this.context = new webkitAudioContext();
      this.tempo = 120;
    }

    Player.prototype.playNote = function(time) {
      var note, notes, _i, _len, _results;
      notes = this.sequencer.next();
      _results = [];
      for (_i = 0, _len = notes.length; _i < _len; _i++) {
        note = notes[_i];
        _results.push((new Synth(this.context)).play(note, time, this.perNote));
      }
      return _results;
    };

    Player.prototype.tick = function() {
      if (!this.playing) {
        return;
      }
      if (this.context.currentTime > (this.lastNote + this.perNote - 0.1)) {
        this.lastNote = this.lastNote + this.perNote;
        this.playNote(this.lastNote);
      }
      return setTimeout(this.tick, 0);
    };

    Player.prototype.play = function() {
      this.playStart = this.context.currentTime;
      this.sequencer.reset();
      this.perNote = 1.0 / (this.tempo * 4 / 60);
      this.playing = true;
      this.playNote(this.playStart);
      this.lastNote = this.playStart;
      console.log(this.lastNote);
      return this.tick();
    };

    Player.prototype.stop = function() {
      return this.playing = false;
    };

    return Player;

  })();

  Synth = (function() {

    Synth.prototype.DECLICK = 0.001;

    function Synth(context) {
      this.context = context;
    }

    Synth.prototype.play = function(note, time, duration) {
      var aenv, flt, osc, oscType;
      osc = this.context.createOscillator();
      oscType = (function() {
        switch (note.type) {
          case 'saw':
            return osc.SAWTOOTH;
          case 'squ':
            return osc.SQUARE;
          case 'sin':
            return osc.SINE;
          case 'tri':
            return osc.TRIANGLE;
          default:
            return osc.SINE;
        }
      })();
      if (note.type === 'noi') {
        osc = this.context.createJavaScriptNode(1024, 1, 1);
        osc.onaudioprocess = function(ev) {
          var arr, i, _i, _ref, _results;
          if (osc.context.currentTime > osc.noteOffTime) {
            osc.onaudioprocess = null;
          }
          arr = ev.outputBuffer.getChannelData(0);
          _results = [];
          for (i = _i = 0, _ref = arr.length; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
            _results.push(arr[i] = (Math.random() * 2) - 1);
          }
          return _results;
        };
        osc.noteOn = function(time) {
          return osc.noteOnTime = time;
        };
        osc.noteOff = function(time) {
          return osc.noteOffTime = time;
        };
      } else {
        osc.frequency.value = note.frequency();
        osc.detune.setValueAtTime(1200 * note.pitch, time);
        osc.detune.linearRampToValueAtTime(0, time + note.pitch_t);
        osc.type = oscType;
      }
      flt = this.context.createBiquadFilter();
      flt.frequency.value = note.filter * note.frequency() * 20;
      flt.Q.value = note.q;
      osc.connect(flt);
      aenv = this.context.createGainNode();
      aenv.gain.value = 0.0;
      flt.connect(aenv);
      aenv.connect(this.context.destination);
      aenv.gain.setValueAtTime(0.0, time);
      aenv.gain.linearRampToValueAtTime(note.amp, time + this.DECLICK);
      aenv.gain.linearRampToValueAtTime(0.0, time + this.DECLICK + (note.amp_t * duration));
      osc.noteOn(time);
      return osc.noteOff(time + (note.amp_t * duration) + this.DECLICK);
    };

    return Synth;

  })();

  window.onload = function() {
    window.player = new Player();
    player.sequencer.tracks[0][0].note = 10;
    player.sequencer.tracks[0][0].type = 'sin';
    player.sequencer.tracks[0][0].amp_t = 0.5;
    player.sequencer.tracks[0][0].pitch = 3;
    player.sequencer.tracks[0][0].pitch_t = 0.03;
    player.sequencer.tracks[0][4].note = 10;
    player.sequencer.tracks[0][4].type = 'sin';
    player.sequencer.tracks[0][4].amp_t = 0.5;
    player.sequencer.tracks[0][4].pitch = 3;
    player.sequencer.tracks[0][4].pitch_t = 0.03;
    player.sequencer.tracks[0][8].note = 10;
    player.sequencer.tracks[0][8].type = 'sin';
    player.sequencer.tracks[0][8].amp_t = 0.5;
    player.sequencer.tracks[0][8].pitch = 3;
    player.sequencer.tracks[0][8].pitch_t = 0.03;
    player.sequencer.tracks[0][12].note = 10;
    player.sequencer.tracks[0][12].type = 'sin';
    player.sequencer.tracks[0][12].amp_t = 0.5;
    player.sequencer.tracks[0][12].pitch = 3;
    player.sequencer.tracks[0][12].pitch_t = 0.03;
    player.sequencer.tracks[1][4].note = 20;
    player.sequencer.tracks[1][4].filter = 3;
    player.sequencer.tracks[1][4].type = 'noi';
    player.sequencer.tracks[1][12].note = 20;
    player.sequencer.tracks[1][12].filter = 3.5;
    player.sequencer.tracks[1][12].type = 'noi';
    player.sequencer.tracks[1][0].note = 33;
    player.sequencer.tracks[1][0].filter = 0.9;
    player.sequencer.tracks[2][2].note = 43;
    player.sequencer.tracks[1][8].note = 35;
    player.sequencer.addStepCallback(function(e) {
      $(".steps li").removeClass('active');
      return $(".steps li:nth-child(" + (e.pos + 1) + ")").addClass('active');
    });
    document.getElementById('play').addEventListener('click', function() {
      return player.play();
    });
    return document.getElementById('stop').addEventListener('click', function() {
      return player.stop();
    });
  };

}).call(this);
